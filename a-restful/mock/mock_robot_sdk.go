// Code generated by MockGen. DO NOT EDIT.
// Source: .\robot_sdk.go

// Package mock_robotsdk is a generated GoMock package.
package mock_robotsdk

import (
	reflect "reflect"
	interface0 "robot-api-golang/a-restful"

	gomock "github.com/golang/mock/gomock"
)

// MockWarehouse is a mock of Warehouse interface.
type MockWarehouse struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseMockRecorder
}

// MockWarehouseMockRecorder is the mock recorder for MockWarehouse.
type MockWarehouseMockRecorder struct {
	mock *MockWarehouse
}

// NewMockWarehouse creates a new mock instance.
func NewMockWarehouse(ctrl *gomock.Controller) *MockWarehouse {
	mock := &MockWarehouse{ctrl: ctrl}
	mock.recorder = &MockWarehouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouse) EXPECT() *MockWarehouseMockRecorder {
	return m.recorder
}

// Robots mocks base method.
func (m *MockWarehouse) Robots() []interface0.Robot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Robots")
	ret0, _ := ret[0].([]interface0.Robot)
	return ret0
}

// Robots indicates an expected call of Robots.
func (mr *MockWarehouseMockRecorder) Robots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Robots", reflect.TypeOf((*MockWarehouse)(nil).Robots))
}

// MockRobot is a mock of Robot interface.
type MockRobot struct {
	ctrl     *gomock.Controller
	recorder *MockRobotMockRecorder
}

// MockRobotMockRecorder is the mock recorder for MockRobot.
type MockRobotMockRecorder struct {
	mock *MockRobot
}

// NewMockRobot creates a new mock instance.
func NewMockRobot(ctrl *gomock.Controller) *MockRobot {
	mock := &MockRobot{ctrl: ctrl}
	mock.recorder = &MockRobotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRobot) EXPECT() *MockRobotMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockRobot) CancelTask(taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockRobotMockRecorder) CancelTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockRobot)(nil).CancelTask), taskID)
}

// CurrentState mocks base method.
func (m *MockRobot) CurrentState() interface0.RobotState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentState")
	ret0, _ := ret[0].(interface0.RobotState)
	return ret0
}

// CurrentState indicates an expected call of CurrentState.
func (mr *MockRobotMockRecorder) CurrentState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentState", reflect.TypeOf((*MockRobot)(nil).CurrentState))
}

// EnqueueTask mocks base method.
func (m *MockRobot) EnqueueTask(commands string) (string, chan interface0.RobotState, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTask", commands)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(chan interface0.RobotState)
	ret2, _ := ret[2].(chan error)
	return ret0, ret1, ret2
}

// EnqueueTask indicates an expected call of EnqueueTask.
func (mr *MockRobotMockRecorder) EnqueueTask(commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTask", reflect.TypeOf((*MockRobot)(nil).EnqueueTask), commands)
}
